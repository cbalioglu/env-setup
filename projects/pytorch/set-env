#!/usr/bin/env bash

_print_err()
{
    printf "$1\n" >&2
}

if [[ $(basename "$0") == set-env ]]; then
    _print_err "This script must be sourced!"

    exit 1
fi

if [[ -v PYTORCH_ENV_ROOT ]]; then
    _print_err "PyTorch development environment is already set. Open a new shell."

    return 1
fi

if [[ ! -f setup.py ]]; then
    _print_err "This script must be sourced at the root of the PyTorch repository."

    return 1
fi

# Set the Intel oneAPI variables.
for _oneapi_root in ~/"intel/oneapi" "/opt/intel/oneapi"; do
    if [[ -d $_oneapi_root ]]; then
        source $_oneapi_root/mkl/2021.3.0/env/vars.sh
        source $_oneapi_root/tbb/2021.3.0/env/vars.sh

        break
    fi
done

unset _oneapi_root

# Update the prompt.
PS1='(pytorch-${CC:-cc}${CMAKE_BUILD_TYPE:+-${CMAKE_BUILD_TYPE,,}}) '$PS1

export PYTORCH_ENV_ROOT=$(pwd)

#
# Build Options
#

#
# BLAS and Threading Settings
#
if [[ -v MKLROOT ]]; then
    export INTEL_MKL_DIR=$MKLROOT
fi

#
# CUDA Settings
#
if command -v nvidia-smi &>/dev/null; then
    export USE_CUDA=ON

    # Build for Ampere (e.g. A100).
    export TORCH_CUDA_ARCH_LIST=8.0
else
    export USE_CUDA=OFF
fi

#
# Distributed Settings
#
export USE_DISTRIBUTED=ON
export USE_MPI=OFF

#
# Misc Settings
#
export USE_ASAN=OFF
export USE_TSAN=OFF

#
# Helper Functions
#
_switch_build()
{
    export CC=$1
    export CXX=$2

    export CMAKE_BUILD_TYPE=$3

    (
        cd "$PYTORCH_ENV_ROOT"

        build_dir=build-${CMAKE_BUILD_TYPE,,}/${CC}-$(${CC} -dumpversion)

        mkdir -p "$build_dir"

        ln --symbolic --force --no-target-directory "$build_dir" build
    )
}

switch-gcc-debug()
{
    _switch_build gcc g++ Debug
}

switch-gcc-release()
{
    _switch_build gcc g++ Release
}

switch-gcc-relwithdebinfo()
{
    _switch_build gcc g++ RelWithDebInfo
}

switch-clang-debug()
{
    _switch_build clang clang++ Debug
}

switch-clang-release()
{
    _switch_build clang clang++ Release
}

switch-clang-relwithdebinfo()
{
    _switch_build clang clang++ RelWithDebInfo
}

make-lib()
{
    (
        cd "$PYTORCH_ENV_ROOT"

        execute_job python setup.py develop
    )
}

make-docs()
{
    (
        cd "$PYTORCH_ENV_ROOT/docs"

        if command -v katex &>/dev/null; then
            execute_job make html
        else
            if ! command -v npm &>/dev/null; then
                _print_err "npm not found!"

                return 1
            fi

            if [[ ! -x $(npm bin)/katex ]]; then
                npm install katex@0.13.13 || return
            fi

            PATH=$(npm bin):$PATH execute_job make html
        fi
    ) || return

    _print_err "\nRun 'python -m http.server <port>' to browse the docs."
}

# By default build in release mode with GCC.
switch-gcc-release

cat << EOF >&2
PyTorch development environment is set.

You can switch between different compiler and build combinations by executing:
 - switch-gcc-debug
 - switch-gcc-release
 - switch-gcc-relwithdebinfo
 - switch-clang-debug
 - switch-clang-release
 - switch-clang-relwithdebinfo

You can build the library and the documentation by executing:
 - make-lib
 - make-docs
EOF
